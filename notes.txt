CSS styling for bottom buttons

/* .extra-buttons{
    display:flex;
    justify-content: center;
    margin-top:5px;
    gap:10px;
} */

/* .buttons-digits{
    display:grid;
    place-items:center;
    grid-template-columns: 55px 55px 55px;
    margin:auto;
    gap:5px;
}

.digits{
    font-size:40px;
    width:50px;
    height:60px;
    padding:0;
    border-radius:5px;
    
}

.extra-buttons{
    display:grid;
    
    grid-template-columns: 115px 50px;
    gap:5px;
    margin-top:5px;
}


#key0 {
    width:110px;
}
 */

/* .display{
    background-color: lightblue;
    width:180px;
    height:100px;
    margin-bottom:10px;
} */
HTML buttons previous
<!-- <div class="buttons-digits">
        <button id="ac" class="digits">AC</button>
        <button id="divide" class="digits">/</button>
        <button id="multiply" class="digits">*</button>
        <button id="key1" class="digits">1</button>
        <button id="key2" class="digits">2</button>
        <button id="key3" class="digits">3</button>
        <button id="key4" class="digits">4</button>
        <button id="key5" class="digits">5</button>
        <button id="key6" class="digits">6</button>
        <button id="key7" class="digits">7</button>
        <button id="key8" class="digits">8</button>
        <button id="key9" class="digits">9</button>
    </div>
    <div class="operators">
        <button id="key7" class="digits">7</button>
        <button id="key8" class="digits">8</button>
        <button id="key9" class="digits">9</button>
    </div>
    <div class="extra-buttons">
        <button id="key0" class="digits">0</button>
        <button id="key-fullstop" class="digits">.</button>
    </div> -->




    //28 03 2023 - WORKS FOR ALL OPERATIONS AND EQUALS - NEED TO ADD FUNCTIONALITY FOR AC AND C
    //works for all operations
    buttons.forEach(button => button.addEventListener('click', (e) =>{
        if(isFinite(e.target.value)){
            displayCurrent.innerHTML += e.target.value;
            result.innerText = "";
            
        }else{
            temp = displayCurrent.textContent;
            numbers.push(temp);
            operators.push(e.target.value);
            displayCurrent.innerHTML = "";
            if(operators.length > 1){
                if(operators[0] != "="){
                    resFinal = operate(operators[0], Number(numbers[0]), Number(numbers[1]));
                    numbers.splice(0,2);
                    numbers.push(resFinal);
                    operators.splice(0,1);
                    result.innerText = resFinal;
                }else{
                    if(numbers[1] == ""){
                        numbers.splice(1,1);
                    }
                    operators.splice(0,1);
                    resFinal = operate(operators[0], Number(numbers[0]), Number(numbers[1]));
                }
            }
            displayCurrent.innerHTML = "";
        }
    }));






    //28/03/2023 - WORKS FOR ALL OPERATIONS  - NEED TO ADD FUNCTIONALITY FOR = and DECIMALS

    const displayCurrent = Array.from(document.getElementsByClassName("current-operand"))[0];
    const output = document.querySelector(".output");
    const displayPrevious = Array.from(document.getElementsByClassName("previous-operand"))[0];
    const buttons = Array.from(document.querySelectorAll('button'));
    const operatorSelector = document.querySelectorAll(".operator");
    const result = document.createElement('div');
    result.classList.add('result');
    output.appendChild(result);
    // console.log(output);
    const operators = [];
    const numbers = [];
    let temp = 0;

    //seems to work now for most operations - need to adjust what happens for when equals is pressed
    buttons.forEach(button => button.addEventListener('click', (e) =>{
        if(isFinite(e.target.value)){
            displayCurrent.innerHTML += e.target.value;
            result.innerText = "";
            
        }else{
            temp = displayCurrent.textContent;
            numbers.push(temp);
            operators.push(e.target.value);
            displayCurrent.innerHTML = "";
            if(operators.length > 1 && operators[0] != "="){
                let resFinal = operate(operators[0], Number(numbers[0]), Number(numbers[1]));
                numbers.splice(0,2);
                numbers.push(resFinal);
                operators.splice(0,1);
                result.innerText = resFinal;
                console.log("array numbers " + numbers);
                console.log("array operators " + operators);
            }
            
            displayCurrent.innerHTML = "";
        }
        

        
    }));


    //24.03.2023 - WORKS FOR FIRST ITERATION ADDITION

const displayCurrent = Array.from(document.getElementsByClassName("current-operand"))[0];
const output = document.querySelector(".output");
const displayPrevious = Array.from(document.getElementsByClassName("previous-operand"))[0];
const buttons = Array.from(document.querySelectorAll('button'));
const result = document.createElement('div');
result.classList.add('result');
output.appendChild(result);
// console.log(output);
const operators = [];
const numbers = [];

buttons.map(button => {
    button.addEventListener('click', (e) => {
        //console.log(e.target.innerText);
        
        if(isFinite(e.target.value)){
            displayCurrent.textContent += e.target.value;
            //console.log(numbers);
        }else{
            operators.push(e.target.value);
            displayPrevious.innerHTML = displayCurrent.innerHTML;
            numbers.push(displayPrevious.textContent);
            if(numbers.length >= 2){
                if(operators[1] =="="){
                    result.innerHTML = operate(operators[0],Number(numbers[0]) ,Number(numbers[1]));
                    numbers.splice(0,1);
                    numbers.push(result.innerText);
                    console.log(numbers);
                    operators.splice(0,2);
                } 
            }
            displayCurrent.innerText = "";   
                    
        }
    });
});



    SCRIPT - INITIAL CODE
    const displayCurrent = Array.from(document.getElementsByClassName("current-operand"))[0];
    const displayPrevious = Array.from(document.getElementsByClassName("previous-operand"))[0];
    const buttons = Array.from(document.querySelectorAll('button'));

    buttons.map(button => {
        button.addEventListener('click', (e) => {
            if(e.target.value != "+"){
                displayCurrent.innerHTML += Number(e.target.value);
                if(e.target.value == "="){
                    console.log(displayPrevious.innerHTML);
                    console.log(displayCurrent.innerHTML.slice(0,-3));
                    displayCurrent.innerHTML = add(Number(displayCurrent.textContent.slice(0,-3)), Number(displayPrevious.textContent));
                }
            }else{
                displayPrevious.innerHTML = Number(displayCurrent.innerHTML);
                displayCurrent.innerHTML = "";
            }
            
        });
    });